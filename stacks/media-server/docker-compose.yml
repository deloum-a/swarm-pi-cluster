version: "3.8"

services:
  # Environment variables to declare:
  #
  # - HOME_DIR=/home/pi
  # - STORAGE=/storage
  # - PUID=1000
  # - PGID=1000
  # - TZ=Europe/Paris

  # Deluge x VPN
  deluge:
    image: binhex/arch-delugevpn
    cap_add:
      - NET_ADMIN  # Required to modify networking, like setting up the VPN
    ports:
      - "8112:8112"  # Deluge WebUI
      - "58846:58846"  # Deluge daemon
      - "58946:58946"  # Deluge torrent port
      - "8118:8118"  # Privoxy
    volumes:
      - ${HOME_DIR}/config/deluge:/config
      - ${STORAGE}/torrent:/data
      - /etc/localtime:/etc/localtime:ro
    environment:
      - VPN_ENABLED=yes
      - VPN_PROV=custom
      - VPN_CLIENT=openvpn
      - STRICT_PORT_FORWARD=yes
      - ENABLE_PRIVOXY=yes
      - LAN_NETWORK=192.168.1.0/24
      - NAME_SERVERS=8.8.8.8,8.8.4.4
      - DELUGE_WEBUI_PORT=8112
      - UMASK=002
      - PUID=1000
      - PGID=1000
    networks:
      - public
    healthcheck:
      test: curl --fail http://localhost:8112 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.storage == true ]
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.deluge.rule=Host(`deluge.pi-cluster.local`)"
        - "traefik.http.routers.deluge.entrypoints=web"
        - "traefik.http.services.deluge.loadbalancer.server.port=8112"
        - "traefik.http.routers.deluge.service=deluge"

  # Samba
  samba:
    image: dperson/samba
    environment:
      - TZ=${TZ}
    ports:
      - "137:137/udp"
      - "138:138/udp"
      - "139:139/tcp"
      - "445:445/tcp"
    volumes:
      - ${STORAGE}:/storage:z
    command: '-s "storage;/storage;yes;no" -u "media;media" -p'
    read_only: true
    tmpfs:
      - /tmp
    stdin_open: true
    tty: true
    networks:
      - public
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.storage == true ]

  # Arr Part

  jackett:
    image: linuxserver/jackett:latest
    ports:
      - "9117:9117"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${STORAGE}/torrent/blackhole:/downloads
      - ${HOME_DIR}/config/jackett:/config
    networks:
      - public
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.storage == true ]
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.jackett.rule=Host(`jackett.pi-cluster.local`)"
        - "traefik.http.routers.jackett.entrypoints=web"
        - "traefik.http.services.jackett.loadbalancer.server.port=9117"
        - "traefik.http.routers.jackett.service=jackett"

  sonarr:
    image: linuxserver/sonarr:4.0.10
    #ports:
    #  - "8989:8989"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ${HOME_DIR}/config/sonarr:/config # config files
      - ${STORAGE}/tv_shows:/tv
      - ${STORAGE}/torrent:/data
    networks:
      - public
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.storage == true ]
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.sonarr.rule=Host(`sonarr.pi-cluster.local`)"
        - "traefik.http.routers.sonarr.entrypoints=web"
        - "traefik.http.services.sonarr.loadbalancer.server.port=8989"
        - "traefik.http.routers.sonarr.service=sonarr"

  bazarr:
    image: linuxserver/bazarr
    #ports:
    #  - "6767:6767"
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${HOME_DIR}/config/bazarr:/config
      - ${STORAGE}/movies:/movies
      - ${STORAGE}/tv_shows:/tv
    networks:
      - public
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.labels.storage == true ]
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.bazarr.rule=Host(`bazarr.pi-cluster.local`)"
        - "traefik.http.routers.bazarr.entrypoints=web"
        - "traefik.http.services.bazarr.loadbalancer.server.port=6767"
        - "traefik.http.routers.bazarr.service=bazarr"

networks:
  public:
    external: true
